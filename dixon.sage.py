
# This file was *autogenerated* from the file dixon.sage
from sage.all_cmdline import *   # import sage library

_sage_const_100 = Integer(100); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_8591966237 = Integer(8591966237)####################
#
#   Dixon Algorithm
#
####################

def dixon2(N,B):
    P = list(primes(_sage_const_1 ,B)) #create the prime basis
    k = len(P)
    # We build the matrix mod 2 to store the decomposition in basis P
    M = Matrix(Integers(_sage_const_2 ),k+_sage_const_1 ,k,sparse=True)
    # This vector stores the B_smooth integers found 
    Z = vector(range(k+_sage_const_1 ))
    print("finding relations")
    # we iterate on z close to sqrt(N) to find z2 Bsmooth
    i = _sage_const_0  #nb of relations found
    z = floor(sqrt(N))
    while i!=k+_sage_const_1 :
        z+=_sage_const_1 
        z2 = z**_sage_const_2 %N
        Bsmooth,z2_factors = is_Bsmooth(z2,P)
        if not(Bsmooth):
            continue
        Z[i]=z
        (f,m) = z2_factors.pop()
        for j in reversed(range(k)):
            if P[j] == f :
              M[i,j] = m
              try :
                (f,m) = z2_factors.pop()
              except :
                break
        i+=_sage_const_1 
    #now extract a fermat factorization
    print("extracting kernel")
    basis = M.kernel().basis()
    print("finding factor")
    for e in basis:
        a = Mod(_sage_const_1 ,N)
        for i in range(len(e)):
            if e[i] == _sage_const_1 :
                a*=Z[i]
        b = sqrt(a**_sage_const_2 )
        d=gcd(a+b,N)
        if d != _sage_const_1  and d != N:
            print d
            return
    print("failed, no factor was found")

def is_Bsmooth(n,P):
  factors = []
  for p in P:
     m = _sage_const_0  #multiplicity
     while n%p == _sage_const_0 :
       n = n/p
       m +=_sage_const_1 
       if n == _sage_const_1 :
         factors.append((p,m))
         return True,factors
     factors.append((p,m))
  return False,factors
        
N,B =_sage_const_8591966237 ,_sage_const_100 
#N,B = 2251802665812493,1000
#N,B = 73786976659910426999,3000

__time__=misc.cputime(); __wall__=misc.walltime(); dixon2(N,B); print("Time: CPU %.2f s, Wall: %.2f s"%(misc.cputime(__time__), misc.walltime(__wall__)))



# This file was *autogenerated* from the file pplusone.sage
from sage.all_cmdline import *   # import sage library

_sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_95853544864250299111409 = Integer(95853544864250299111409); _sage_const_100 = Integer(100); _sage_const_40000000000 = Integer(40000000000); _sage_const_2100 = Integer(2100); _sage_const_13 = Integer(13); _sage_const_17 = Integer(17); _sage_const_1000 = Integer(1000); _sage_const_746482824012238308661619491135773503333385064366762059957618554835738449567418578817253229 = Integer(746482824012238308661619491135773503333385064366762059957618554835738449567418578817253229); _sage_const_8591966237 = Integer(8591966237)##########
#
#   p+1 algorithm 
#
#   I use a 'trick' to avoid recoding the operation *
#   Just like a+ib is equivalent to the matrix :
#   a  b
#   -b a
#   Our pair a+sqrt(d)b can be written:
#   a  b
#   db a
#   and we get the multiplication for free since
#   a  b  *  a'  b' = aa'+dbb'   ab'+a'b
#   db a     db' a'   d(a'b+ab') dbb'+aa'
#
##########


import numpy as np
import time
def pplusone(N,B):
    B_ = _sage_const_40000000000 
    X = reduce(lambda x,y : x*y, [p**(floor(log(B_)/log(p))+_sage_const_1 ) for p in primes(_sage_const_1 ,B)])
    print X
    factor = _sage_const_1 
    i=_sage_const_0 
    while(factor == _sage_const_1 ):
      i+=_sage_const_1 
      print i
      a = Mod(randint(_sage_const_1 ,N-_sage_const_1 ),N)
      b = Mod(randint(_sage_const_1 ,N-_sage_const_1 ),N)
      d = (a**_sage_const_2 -_sage_const_1 )/b**_sage_const_2 
      alpha = matrix([[a,b],[d*b,a]])
      (u,v) = (alpha**X)[_sage_const_0 ]
      factor = gcd(u-_sage_const_1 ,v)
    print(factor)


N,B = _sage_const_17 *_sage_const_13 ,_sage_const_100 
N,B = _sage_const_8591966237 , _sage_const_100 
N,B = _sage_const_95853544864250299111409 ,_sage_const_2100 
N,B = _sage_const_746482824012238308661619491135773503333385064366762059957618554835738449567418578817253229 ,_sage_const_1000 
__time__=misc.cputime(); __wall__=misc.walltime(); pplusone(N,B); print("Time: CPU %.2f s, Wall: %.2f s"%(misc.cputime(__time__), misc.walltime(__wall__)))

